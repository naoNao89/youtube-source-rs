name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting and basic linting
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Test on multiple platforms and Rust versions
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, 1.82.0] # MSRV (Minimum Supported Rust Version)
        exclude:
          # Only test MSRV on Ubuntu to save CI time
          - os: windows-latest
            rust: 1.82.0
          - os: macos-latest
            rust: 1.82.0
          # Only test beta on Ubuntu
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-

      - name: Build
        run: cargo build --verbose --all-features

      - name: Run tests
        run: cargo test --verbose --all-features

      - name: Run examples
        run: |
          cargo run --example basic_usage
          cargo run --example test_multi_client
          cargo run --example test_client_capabilities

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-coverage-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-coverage-cargo-

      - name: Generate code coverage
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: cobertura.xml
          fail_ci_if_error: false

  # Integration tests with Lavalink
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-integration-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-integration-cargo-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start test infrastructure
        run: |
          cd test-infrastructure
          chmod +x run-tests.sh
          ./run-tests.sh start

      - name: Wait for services to be ready
        run: |
          echo "Waiting for Lavalink services to be ready..."

          # Check if containers are running first
          echo "Checking container status..."
          docker ps --filter "name=lavalink" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

          # Wait for containers to be running and healthy
          echo "Waiting for Lavalink v4 to be ready..."
          for i in {1..60}; do
            if docker ps --filter "name=lavalink-v4-test" --filter "status=running" --format "{{.Names}}" | grep -q lavalink-v4-test; then
              if curl -s http://localhost:2333/version > /dev/null 2>&1; then
                echo "✅ Lavalink v4 is ready!"
                break
              fi
            fi
            if [ $i -eq 60 ]; then
              echo "❌ Timeout waiting for Lavalink v4"
              docker logs lavalink-v4-test --tail 50
              exit 1
            fi
            echo "Waiting for Lavalink v4... ($i/60)"
            sleep 3
          done

          echo "Waiting for Lavalink v3 to be ready..."
          for i in {1..60}; do
            if docker ps --filter "name=lavalink-v3-test" --filter "status=running" --format "{{.Names}}" | grep -q lavalink-v3-test; then
              if curl -s http://localhost:2334/version > /dev/null 2>&1; then
                echo "✅ Lavalink v3 is ready!"
                break
              fi
            fi
            if [ $i -eq 60 ]; then
              echo "❌ Timeout waiting for Lavalink v3"
              docker logs lavalink-v3-test --tail 50
              exit 1
            fi
            echo "Waiting for Lavalink v3... ($i/60)"
            sleep 3
          done

          echo "🎉 All services are ready!"

      - name: Run integration tests
        run: |
          cargo test --features integration-tests lavalink_integration_tests -- --ignored --test-threads=1
        env:
          RUST_BACKTRACE: 1

      - name: Collect test results
        if: always()
        run: |
          cd test-infrastructure
          ./run-tests.sh logs > test-logs.txt || true

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: test-infrastructure/test-logs.txt

      - name: Cleanup test infrastructure
        if: always()
        run: |
          cd test-infrastructure
          # Stop services gracefully
          ./run-tests.sh stop || true
          # Force cleanup if needed
          docker-compose down --remove-orphans --volumes || true
          docker system prune -f || true

  # Performance benchmarks
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-bench-cargo-

      - name: Run benchmarks
        run: cargo bench --all-features

  # Build release artifacts
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: youtube-source-rs-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: youtube-source-rs-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: youtube-source-rs-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: youtube-source-rs-macos-aarch64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }} --all-features

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            target/${{ matrix.target }}/release/libyoutube_source_rs.*
            target/${{ matrix.target }}/release/youtube_source_rs.dll
            !target/${{ matrix.target }}/release/*.d
            !target/${{ matrix.target }}/release/deps/
